import { q as Report, c as ConfigLoader, H as HtmlValidate, a as ConfigData } from './core.js';
export { A as AttributeData, a0 as AttributeEvent, f as CSSStyleDeclaration, ad as CompatibilityOptions, a2 as ConditionalEvent, C as Config, a as ConfigData, b as ConfigError, c as ConfigLoader, K as ConfigReadyEvent, a5 as DOMLoadEvent, a6 as DOMReadyEvent, u as DeferredMessage, a3 as DirectiveEvent, a4 as DoctypeEvent, D as DynamicValue, $ as ElementReadyEvent, J as Event, I as EventCallback, E as EventDump, G as EventHandler, a9 as FileSystemConfigLoader, aa as Formatter, e as HtmlElement, H as HtmlValidate, a8 as ListenEventMap, L as Location, s as Message, m as MetaCopyableProperty, M as MetaData, j as MetaDataTable, k as MetaElement, l as MetaTable, i as NestedError, N as NodeClosed, B as Parser, z as Plugin, P as ProcessElementContext, q as Report, r as Reporter, t as Result, R as Rule, n as RuleDocumentation, h as SchemaValidationError, S as Severity, o as Source, O as SourceReadyEvent, d as StaticConfigLoader, Z as TagCloseEvent, Y as TagEndEvent, X as TagOpenEvent, _ as TagReadyEvent, V as TagStartEvent, y as TemplateExtractor, T as TextNode, g as TokenDump, Q as TokenEvent, w as TransformContext, x as Transformer, a7 as TriggerEventMap, U as UserError, a1 as WhitespaceEvent, W as WrappedError, ac as compatibilityCheck, p as configPresets, ab as formatterFactory, F as ruleExists, v as version } from './core.js';
import 'ajv';

interface ExpandOptions {
    /**
     * Working directory. Defaults to `process.cwd()`.
     */
    cwd?: string;
    /**
     * List of extensions to search for when expanding directories. Extensions
     * should be passed without leading dot, e.g. "html" instead of ".html".
     */
    extensions?: string[];
}

interface InitResult {
    filename: string;
}

interface CLIOptions {
    configFile?: string;
    rules?: string | string[];
}
/**
 * @public
 */
declare class CLI {
    private options;
    private config;
    private loader;
    private ignored;
    /**
     * Create new CLI helper.
     *
     * Can be used to create tooling with similar properties to bundled CLI
     * script.
     */
    constructor(options?: CLIOptions);
    /**
     * Returns list of files matching patterns and are not ignored. Filenames will
     * have absolute paths.
     *
     * @public
     */
    expandFiles(patterns: string[], options?: ExpandOptions): string[];
    getFormatter(formatters: string): (report: Report) => string;
    /**
     * Initialize project with a new configuration.
     *
     * A new `.htmlvalidate.json` file will be placed in the path provided by
     * `cwd`.
     */
    init(cwd: string): Promise<InitResult>;
    /**
     * Searches ".htmlvalidateignore" files from filesystem and returns `true` if
     * one of them contains a pattern matching given filename.
     */
    isIgnored(filename: string): boolean;
    /**
     * Clear cache.
     *
     * Previously fetched [[HtmlValidate]] instances must either be fetched again
     * or call [[HtmlValidate.flushConfigCache]].
     */
    clearCache(): void;
    /**
     * Get HtmlValidate instance with configuration based on options passed to the
     * constructor.
     *
     * @internal
     */
    getLoader(): ConfigLoader;
    /**
     * Get HtmlValidate instance with configuration based on options passed to the
     * constructor.
     *
     * @public
     */
    getValidator(): HtmlValidate;
    /**
     * @internal
     */
    getConfig(): ConfigData;
}

export { CLI };
